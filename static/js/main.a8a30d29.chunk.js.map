{"version":3,"sources":["client/img/death-star.svg","client/swapi/index.js","client/components/loader/index.jsx","client/components/play/index.jsx","client/components/score/index.js","client/components/scores/index.jsx","client/components/About/index.jsx","client/components/AppNavbar/index.jsx","client/App.jsx","client/serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","swapi","getGamePerson","_getGamePerson","Object","asyncToGenerator","regenerator_default","a","mark","_callee","personInt","response","data","species","speciesResponse","speciesData","homeworldResponse","homeworldData","person","wrap","_context","prev","next","Math","floor","random","fetch","concat","sent","json","length","name","homeworld","eye_colour","hair_color","abrupt","stop","this","apply","arguments","Loader","_ref","display","react_default","createElement","className","src","deathStar","alt","Play","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","guessCorrect","guess","loading","checkGuess","bind","assertThisInitialized","getAlert","getNextPerson","resetGame","setState","e","correct","target","value","toLowerCase","method","alertColor","alertMessage","react","reactstrap_es","color","_this$state","fluid","components_loader","sm","md","size","offset","inverse","type","id","placeholder","disabled","onChange","onClick","React","Score","score","numGuesses","Scores","scores","eachScore","getScores","then","catch","i","components_score","key","dark","map","Component","About","tag","Link","to","AppNavbar","toggle","isOpen","prevState","expand","navbar","href","App","BrowserRouter","AppNavbar_AppNavbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","src_client_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8a30d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.2e4838bd.svg\";","\nexport type Person = {\n  eye_colour: string,\n  hair_color: string,\n  name: string,\n  species: string,\n  homeworld: string,\n};\n\n\nexport default {\n  async getGamePerson(): Promise<Person> {\n\n    const personInt = Math.floor(Math.random() * 87) + 1;\n    const response = await fetch(`https://swapi.co/api/people/${personInt}`);\n    const data = await response.json();\n\n    var species = '';\n\n    if(data.species.length){\n      const speciesResponse = await fetch(data.species[0]);\n      const speciesData = await speciesResponse.json();\n      species = speciesData.name;\n    }\n\n    const homeworldResponse = await fetch(data.homeworld);\n    const homeworldData = await homeworldResponse.json();\n\n    const person: Person = {\n      eye_colour: data.eye_colour,\n      hair_color: data.hair_color,\n      name: data.name,\n      species: species,\n      homeworld: homeworldData.name,\n    };\n\n    return person;\n  },\n};\n","import React from 'react';\nimport './loader.css';\nimport deathStar from '../../img/death-star.svg'\n\nexport type Props = {\n  display: boolean,\n};\n\nconst Loader = ({ display }) => (\n  <div>\n    {display ?\n      <div className=\"loading\">\n        <img\n            src={deathStar}\n            className=\"star\"\n            alt=\"Spinning Death Star\"\n            />\n      </div>\n      :\n      ''\n    }\n  </div>\n\n);\n\nexport default Loader;\n","import * as React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardText,\n  CardTitle,\n  Form,\n  FormGroup,\n  Input,\n  Alert,\n  Button,\n} from 'reactstrap';\nimport swapi from '../../swapi';\nimport Loader from '../loader';\n\nexport type Props = {};\nexport type State = {\n  person: Person,\n  guessCorrect: number,\n  guess: string,\n  loading: boolean,\n};\n\nexport default class Play extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      person: {},\n      guessCorrect: -1,\n      guess: \"\",\n      loading: false,\n    };\n\n    this.checkGuess = this.checkGuess.bind(this);\n    this.getAlert = this.getAlert.bind(this);\n    this.getNextPerson = this.getNextPerson.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  async componentDidMount() {\n    this.getNextPerson()\n  }\n\n  async getNextPerson() {\n    this.setState({\n      loading: true,\n    })\n    const response = await swapi.getGamePerson();\n\n    this.setState({\n      person: response,\n      loading: false,\n    });\n  }\n\n  checkGuess(e) {\n    const correct = e.target.value.toLowerCase() === this.state.person.name.toLowerCase();\n    this.setState({\n      guessCorrect: (correct) ? 1 : 0,\n      guess: e.target.value,\n    });\n    if(correct){\n      fetch(`http://localhost:5000/api/scores/${this.state.person.name}`,\n        {\n          method: \"PUT\",\n        })\n    }\n  }\n\n  getAlert() {\n    const alertColor = this.state.guessCorrect === 1 ? \"success\" : \"warning\";\n    const alertMessage = this.state.guessCorrect === 1 ? \"You've got it right!\" : \"That's not quite right...\";\n    return(\n      <Alert color={alertColor}>\n        {alertMessage}\n      </Alert>\n    )\n  }\n\n  resetGame() {\n    this.getNextPerson();\n    this.setState({\n        guessCorrect: -1,\n        guess: ''\n    });\n  }\n\n  render() {\n    const { person, loading } = this.state;\n    return (\n      <Container fluid>\n        <Loader display={loading} />\n        <Row>\n          <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n            <h2>Let's play a guessing game</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm=\"12\" md={{ size: 8, offset: 2 }} className=\"mb-5\">\n            <Card inverse className=\"bg-dark\">\n              <CardBody>\n                <CardTitle>Guess Who</CardTitle>\n                <CardText>\n                  { person.species ? `I am a ${person.species}. ` : '' }\n                  { person.homeworld ? `My homeworld is ${person.homeworld}. ` : '' }\n                  { person.eye_colour ? `My eyes are ${person.eye_colour}. ` : '' }\n                  { person.hair_color ? `My hair is ${person.hair_color}. ` : '' }\n                </CardText>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col sm=\"12\" md={{ size: 8, offset: 2 }} className=\"mb-5\">\n            <Card inverse className=\"bg-dark\">\n              <CardBody>\n                <CardTitle>You Must Be</CardTitle>\n                <CardText>\n                  <Form>\n                    <FormGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"personName\"\n                        id=\"personName\"\n                        placeholder=\"Character name\"\n                        value={this.state.guess}\n                        disabled={this.state.guessCorrect === 1}\n                        onChange={this.checkGuess}\n                      />\n                    </FormGroup>\n                    {\n                      this.state.guessCorrect > -1 ? this.getAlert() : ''\n                    }\n                  </Form>\n                </CardText>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n            <Button color=\"warning\" onClick={this.resetGame}>Reset</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\n\nexport type Props = {\n  score: {\n    name: string,\n    numGuesses: number,\n  }\n};\n\nconst Score = ({ score }) => (\n  <tr>\n    <td>{score.numGuesses}</td>\n    <td>{score.name}</td>\n  </tr>\n);\n\nexport default Score\n","import React, { Component } from 'react';\nimport {\n  Table,\n  Container\n } from 'reactstrap';\nimport Score from '../score';\nimport Loader from '../loader'\n\nexport type Props = {};\nexport type State = {\n  scores: array,\n  loading: boolean,\n};\n\nexport default class Scores extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      scores: [],\n      loading: false,\n    };\n\n    this.eachScore = this.eachScore.bind(this);\n    this.getScores = this.getScores.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n        loading: true,\n    });\n\n    const scores = await this.getScores();\n\n    this.setState({\n        scores: scores,\n        loading: false,\n    })\n  }\n\n  async getScores() {\n    return fetch(`http://localhost:5000/api/scores/`)\n      .then(response => response.json())\n      .then(scores => {\n        return scores;\n      })\n      .catch(e => {\n        return [];\n      })\n  }\n\n  eachScore(score, i) {\n    return (\n      <Score score={score}\n               key={i}\n               />\n    )\n  }\n\n  render() {\n    const { scores, loading } = this.state;\n    return (\n      <Container className=\"pb-5\">\n        <Loader display={loading} />\n        <Table dark>\n          <thead>\n            <tr>\n              <th>Number of Guesses</th>\n              <th>Character Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {scores.map(this.eachScore)}\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Container,\n  Jumbotron,\n  Button,\n} from 'reactstrap';\nimport './About.css';\nimport { Link } from 'react-router-dom';\n\nconst About = () => (\n  <Container fluid>\n    <Jumbotron>\n      <h1 className=\"display-3\">About</h1>\n      <p className=\"lead\">This is a sample app that uses the Star Wars API (SWAPI), with React to play a simple guessing game!</p>\n      <hr className=\"my-2\" />\n      <p>To play the game, click Play below</p>\n      <p className=\"lead\">\n        <Button color=\"primary\" tag={Link} to=\"/play\">Play</Button>\n      </p>\n    </Jumbotron>\n  </Container>\n);\n\nexport default About;\n","\nimport React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport type Props = {};\nexport type State = {\n  isOpen: boolean,\n};\n\nexport default class AppNavbar extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false,\n    };\n  }\n\n  toggle: Function;\n\n  toggle() {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n    }));\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n          <NavbarBrand tag={Link} to=\"/\">SWAPI App</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink tag={Link} to=\"/play\">Play</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink tag={Link} to=\"/scores\">Scores</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/lauchlanc/swapi-app\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Play from './components/play'\nimport Scores from './components/scores'\nimport About from './components/About';\nimport AppNavbar from './components/AppNavbar';\n\nexport type Props = {};\n\nclass App extends Component<Props> {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <AppNavbar />\n          <Switch>\n            <Route exact path=\"/\" component={About} />\n            <Route exact path=\"/play\" component={Play} />\n            <Route exact path=\"/scores\" component={Scores} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './client/App';\nimport * as serviceWorker from './client/serviceWorker';\n\nconst root: ?Element = document.getElementById('root');\n\nif(root){\n  ReactDOM.render(\n    <App />\n    , root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}